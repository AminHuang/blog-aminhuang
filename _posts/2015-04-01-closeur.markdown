---
layout: post
title:  "作用域链与闭包"
date:   2015-04-01 16:14:00
---

作用域
---
  在JavaScript中有全局作用域和局部作用域，没有块级作用域，局部变量的优先级高于全局变量。
声明提前：
{% highlight javascript %}
  var scope="global";
  function scopeTest(){
      console.log(scope);
      var scope="local"  
   }
   scopeTest(); //undefined
{% endhighlight %}  

  在scopeTest()函数里面因为有和全局环境中相同的变量，虽然声明写在了后面，但是在执行函数的时候声明提前了。在这儿输出的就不是全局变量中的变量值，而是函数体内部的变量值。
  在执行完函数之后再输出scope的值就还会是global，内部同名局部变量不改变全局变量中的值。
<pre>
  var scope="global";
  function scopeTest(){
      console.log(scope);
      var scope="local"  
   }
   scopeTest(); //undefined
   console.log(scope); //“global”
</pre>

作用域链
  每个函数都有自己的执行环境。当执行流进入一个函数时，执行的环境就会被推入一个环境栈中。而在函数执行之后，栈将其环境弹出，把控制权返回给之前的执行环境。
  当代码在一个环境中执行时，会创建变量对象的一个作用域链（scope chain）。
  作用域链的用途，是保证对执行环境有权访问的所有变量和函数的有序访问。
  作用域链的前端，始终都是当前执行代码所在环境的变量对象。
  如果这个环境是函数，则将其活动对象作为变量对象。活动对象在最开始时只包含一个变量，就是arguments对象（这个对象在全局环境中是不存在的）。
  作用域链的下一个变量对象来自包含（外部）环境，而再下一个变量对象则来自下一个包含环境。这样一直延续到全局执行环境。全局执行环境的变量对象时钟都是作用域链的最后一个对象。
  无论什么时候在函数中访问一个变量时，就会从作用域链中搜索具有相应名字的变量。一般来说，当函数执行完毕之后，局部对象就会被销毁，内存中仅保存全局作用域（全局执行环境的变量对象）。
  变量的查找会从第一个链的对象开始，如果对象中包含变量属性，那么停止查找，如果没有就会继续向上级作用域链查找，知道找到全局对象。作用域链的逐级查找会影响到程序的性能，变量作用域链越长对性能影响越大，所以应当尽量避免使用全局变量。



闭包
  闭包是指在当前作用域内总是能访问外部作用域中的变量。

  “在另一个函数内部定义的函数会将包含函数（即外部函数）的活动对象添加到它的作用域链中。”BY《JavaScript高级程序设计》
<pre>
  function f1() {
    var n = 999;
    nAdd = function() { n+=1;}
    function f2() {
      alert(n);
    }
    return f2;
  }
  var result = f1();
  result(); // 执行alert(n), n = 999
  nAdd(); // 执行n+=1;
  result(); // 再次执行alert(n), n = 1000
</pre>
  闭包的最大用途：1.读取函数内部的变量 2.让变量的值始终保存在内存中。
  见上面例子，result实际上是闭包f2函数，从运行结果可以看到，函数f1的局部变量n一直保存在内存中，并没有在f1调用之后被自动清除。
  注意，在上面的例子中，nAdd是全局变量。



· 在闭包中的变量
  在使用闭包的时候，由于作用域链机制的影响，闭包只能取得内部函数的最后一个值，这引起的一个副作用是如果内部函数在一个循环中，那么变量的值始终为最后一个值。
  例如以下例子：
<pre>
function createFunctions() {
  var result = new Array();
  for (var i = 0; i < 10; i++) {
    result[i] = function() {
      return i;
    }
  }
  reutrn result;
}
</pre>
  这个函数会返回一个函数数组，表面上看，似乎每个函数都应该返回自己的索引。
  但实际上，每个函数都返回10。因为每个函数的作用域链中都保存着createFunctions()函数的活动对象，所有它们引用的都是同一个变量i。当createFuntions()函数返回后，变量i的值都是10。此时，每个函数都引用着保存变量i的同一个变量对象，所以在每一个函数内部i的值都是10.





